{"version":3,"sources":["reportWebVitals.js","features/counter/counterSlice.js","features/landmark/landmarkSlice.js","app/store.js","pages/map/map.js","features/landmark/Landmark.js","App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","counterSlice","createSlice","name","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","landmarkSlice","landmarkList","editor","note","create","push","add","configureStore","reducer","counter","counterReducer","landamrk","landamrkReducer","AnyReactComponent","text","Map","props","location","lat","lng","landmarkName","handleInputChange","bind","handleSubmit","event","target","this","setState","alert","preventDefault","updateLocation","navigator","geolocation","getCurrentPosition","position","latitude","coords","longitude","console","log","style","height","width","onClick","onSubmit","type","onChange","bootstrapURLKeys","key","defaultCenter","center","defaultZoom","zoom","Component","defaultProps","Landmark","landmark","useSelector","useDispatch","className","map","i","index","App","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.a4e7c4b1.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createSlice } from '@reduxjs/toolkit'\r\n\r\nexport const counterSlice = createSlice({\r\n    name: 'counter',\r\n    initialState: {\r\n        value: 0\r\n    },\r\n    reducers: {\r\n        increment: state => {\r\n            // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n            // doesn't actually mutate the state because it uses the Immer library,\r\n            // which detects changes to a \"draft state\" and produces a brand new\r\n            // immutable state based off those changes\r\n            state.value += 1\r\n        },\r\n        decrement: state => {\r\n            state.value -= 1\r\n        },\r\n        incrementByAmount: (state, action) => {\r\n            state.value += action.payload\r\n        }\r\n    }\r\n})\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions\r\n\r\nexport default counterSlice.reducer","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const landmarkSlice = createSlice({\r\n    name: 'landmark',\r\n    initialState: {\r\n        landmarkList: [\r\n            {\r\n                name: 'Test Landmark 1 ',\r\n                editor: 'Editor 1',\r\n                note: 'This is my favorite landmark.'\r\n            }, {\r\n                name: 'Test Landmark 2 ',\r\n                editor: 'Editor 2',\r\n                note: 'This is my second favorite landmark.'\r\n            }\r\n        ]\r\n\r\n    },\r\n    reducers: {\r\n        create: (state, action) => {\r\n            state.landmarkList.push(action.payload);\r\n        }\r\n    }\r\n})\r\n\r\nexport const { add } = landmarkSlice.actions\r\nexport default landmarkSlice.reducer","import { configureStore } from '@reduxjs/toolkit'\r\nimport counterReducer from '../features/counter/counterSlice'\r\nimport landamrkReducer from '../features/landmark/landmarkSlice'\r\nexport default configureStore({\r\n    reducer: {\r\n        counter: counterReducer,\r\n        landamrk: landamrkReducer\r\n    }\r\n})","import React, { Component } from 'react';\r\nimport GoogleMapReact from 'google-map-react';\r\n\r\nconst AnyReactComponent = ({ text }) => <div>{text}</div>;\r\n\r\nclass Map extends Component {\r\n    static defaultProps = {\r\n        center: {\r\n            lat: -33.86,\r\n            lng: 151.20\r\n        },\r\n        zoom: 11\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            location: {\r\n                lat: '',\r\n                lng: ''\r\n            },\r\n            landmarkName: '',\r\n            editor: '',\r\n            note: 'Please write something about this landmark.'\r\n        }\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleInputChange(event) {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        alert('A landmark was submitted. \\nName: ' + this.state.landmarkName +\r\n            '\\nEditor: ' + this.state.editor +\r\n            '\\nNote: ' + this.state.note);\r\n        event.preventDefault();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateLocation();\r\n    }\r\n\r\n    updateLocation() {\r\n        // Get location of user\r\n        let success = position => {\r\n            const latitude = position.coords.latitude;\r\n            const longitude = position.coords.longitude;\r\n            this.setState(\r\n                {\r\n                    location: {\r\n                        lat: latitude,\r\n                        lng: longitude\r\n                    }\r\n                }\r\n            );\r\n        };\r\n\r\n        function error() {\r\n            console.log(\"Unable to retrieve your location\");\r\n        }\r\n        navigator.geolocation.getCurrentPosition(success, error);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            // Important! Always set the container height explicitly\r\n            <div style={{ height: '75vh', width: '100%' }}>\r\n                <button onClick={this.updateLocation()}>Update My Location on Map</button>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        Landmark Name:\r\n                          <input\r\n                            type=\"text\"\r\n                            name=\"landmarkName\"\r\n                            value={this.state.value}\r\n                            onChange={this.handleInputChange} />\r\n                    </label>\r\n                    <br />\r\n                    <label>\r\n                        Editor's Name:\r\n                          <input\r\n                            type=\"text\"\r\n                            name=\"editor\"\r\n                            value={this.state.value}\r\n                            onChange={this.handleInputChange} />\r\n                    </label>\r\n                    <br />\r\n                    <label>\r\n                        <br />\r\n                        Notes about this Landmark:\r\n                    <textarea\r\n                            type=\"text\"\r\n                            name=\"note\"\r\n                            value={this.state.value}\r\n                            onChange={this.handleInputChange} />\r\n                    </label>\r\n                    <br />\r\n                    <input type=\"submit\" value=\"Submit\" />\r\n                </form>\r\n                <GoogleMapReact\r\n                    bootstrapURLKeys={{ key: \"AIzaSyCGbA8I_ftApSw83dkxEw0FFmfCOU1im5A\" }}\r\n                    defaultCenter={this.props.center}\r\n                    defaultZoom={this.props.zoom}\r\n                    center={this.state.location}\r\n                >\r\n                    <AnyReactComponent\r\n                        lat={-27.470125}\r\n                        lng={153.021072}\r\n                        text=\"You are here\"\r\n                    />\r\n                </GoogleMapReact>\r\n\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default Map;","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { add } from './landmarkSlice';\r\nimport './Landmark.css';\r\n\r\nexport function Landmark() {\r\n    const landmark = useSelector(state => state.landamrk.landmarkList)\r\n    const dispatch = useDispatch()\r\n\r\n    return (\r\n\r\n        <div>\r\n            <h2 className='title'>Landmark List</h2>\r\n            <div>\r\n                <ul>\r\n                    {landmark.map((i, index) => (<ul\r\n                        className='no-bullets'\r\n                        key={index}>\r\n                        <h3>{i.name}</h3>\r\n                        <i><h5 className=\"editor\">by {i.editor}</h5></i>\r\n                        <li>{i.note}</li>\r\n                        <br />\r\n                    </ul>))}\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Landmark;","import './App.css';\nimport Map from './pages/map/map';\nimport Landmark from './features/landmark/Landmark';\nimport { useDispatch } from 'react-redux';\nimport add from './features/landmark/landmarkSlice';\n\n\nfunction App() {\n  const dispatch = useDispatch();\n  const handleAddLandmark = () => {\n    dispatch(add({ name: 'new item 3', editor: 'Lu', note: 'another test' }))\n    console.log('added new item')\n  }\n  return (\n    <div>\n      <h1 className='App'>My Community Landmark</h1>\n      <div className=\"container\">\n        <Map />\n        <Landmark />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './app/store';\n\nimport App from '../src/App';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}